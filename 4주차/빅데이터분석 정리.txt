파이썬에서 라이브러리(여러개의 함수, 클래스, 모듈이 모여 있는 집합체)를 불러오는 방법
라이브러리는 보통 특정 기능이나 작업을 수행하는 코드들을 포함하고 있어 개발자가 직접 구현하지 않아도 라이브러리를 이용해 필요한 작업을 빠르고 효율적으로 처리 가능!
클래스: 객체 지향 프로그래밍에서 객체를 정의하는 템플릿 또는 청사진이다. 클래스는 속성과 메서드(행동)를 포함하하는 실체적인 인스턴스이다. 이를 통해 객체를 생성 가능하다. 
동일한 유형의 객체들을 생성하기 위한 청사진, 객체를 생성할 때 클래스를 사용하여 해당 객체의 속성이나 행동을 정의 할 수 있다. 
ex) numpy: 수치 연산을 위한 기능을 제공
     pandas 데이터 분석 및 조작을 위한 기능을 제공
(1) import
import 모듈 as 약어(별칭)
(2) 모듈의 전체 기능을 다 사용하지 않고 일부만 사용하고 싶다면?
import 모듈
(3) 특정 함수나 클래스만 불러오기
from 모듈 import 클래스, 모듈 -> 여기서 중요한 점은 파이썬에서 from구문은 모듈을 기준으로 움직이기에 
클래스는 뒤에 올 수 없다는 점이다. 

read_csv() 함수 정의와 활용
pandas 라이브러리에서 제공하는 함수, csv 파일을 읽어서 데이터 프레임 형식으로 변환하는 역할
csv는 데이터를 구분자(보통 쉼표)로 구분한 텍스트 파일 형식이다. 
저 함수는 csv 파일 경로를 읽어와 pandas dataframe으로 변환한다. 이를 통해 csv 파일의 데이터를 pandas에서 쉽게 처리하고 분석할 수 있다. 

데이터프레임이란? 
pandas 라이브러리에서 제공하는 2차원 데이터 구조로 행과 열로 데이터를 저장한다. 이는 엑셀이나 sql테이블 처럼 데이터를 관리할 수 있는 방식이 된다. -> 데이터프레임 변환? 다양한 형태의 데이터를 pandas dataframe 형식으로 변환하는 것을 의미한다. ex) csv 파일, 엑셀 파일, json데이터 등을 읽어 데이터 프레임으로 변환하여 pandas 제공하는 다양한 데이터 분석 기능을 사용할 수 있게 된다. 
-> 2차원 데이터 구조를 가지기 위한 리스트 튜플 딕션너리 정의
리스트와 튜플은 기본적으로 1차원이나 2차원 데이터 구조가 될 수 있습니다. 즉, 그 안에 리스트나 튜플이 포함되면 2차원 데이터 구조처럼 다룰 수 있습니다.
딕셔너리는 기본적으로 1차원 구조로, 키-값 쌍으로 데이터를 저장합니다. 그러나 값에 리스트나 튜플을 저장하면, 딕셔너리 역시 2차원 데이터처럼 사용할 수 있습니다.

json(표준 라이브러리)은 데이터 교환 포멧 중 하나로, 텍스트 기반이고 사람과 기계가 읽기 쉬운 형태로 데이터를 표현하는 방법
서버와 클라이언트 간에 데이터를 전송할 때 사용되며, 다양한 프로그래핑 언어에서 지원된다.
json 데이터를 파싱(데이터를 구조화된 형태로 분석하고 처리하는 과정)하고, 파이썬 객체로 변환하거나 파이썬 객체를 json 형식으로 직렬화하는 기능을 제공한다.
간단한 데이터 구조: JSON은 객체와 배열을 기반으로 한 데이터 구조를 지원합니다.

객체는 키-값 쌍으로 이루어져 있으며 {}로 감싸져 있습니다.
배열은 순서가 있는 값들의 목록이며 []로 감싸져 있습니다.
데이터 타입: JSON은 문자열, 숫자, 불리언 값, 배열, 객체 및 null을 지원합니다.
쉽게 엑셀을 코드형태로 나타낸 것이다. 

pickle
정의: **피클(Pickle)**은 파이썬에서 객체를 파일에 저장하거나 네트워크를 통해 전송하기 위해 직렬화(serialization)와 역직렬화(deserialization)를 하는 방식입니다. 피클을 사용하면 파이썬 객체를 바이트 스트림으로 변환하여 파일에 저장하거나, 다시 그 바이트 스트림을 읽어 원래의 파이썬 객체로 복원할 수 있습니다.
기능은 파이썬 객체를 디스크에 저장하거나 네트워크로 전송할 때 유용하며, 주로 머신러닝 모델을 저장하거나, 복잡한 객체를 저장해야 할 때 사용됩니다.
직렬화(Serialization)와 역직렬화(Deserialization)는 데이터나 객체를 저장하거나 전송하기 위해 변환하는 방식입니다. 이 두 용어는 데이터가 저장된 상태와 전송되는 방식을 설명하는 데 사용됩니다.

직렬화 (Serialization)
직렬화는 파이썬 객체(리스트, 딕셔너리, 클래스 객체 등)를 바이트 스트림으로 변환하는 과정입니다. 이렇게 변환된 데이터는 파일에 저장하거나 네트워크를 통해 다른 시스템으로 전송할 수 있게 됩니다. 이 과정에서 파이썬 객체는 일련의 바이트로 변환되어 저장 또는 전송할 수 있는 형태로 바뀝니다.

직렬화의 예시
파이썬 객체를 직렬화하면, 예를 들어 딕셔너리 {'name': 'Alice', 'age': 25} 같은 객체는 바이트 형식으로 변환됩니다. 직렬화된 데이터는 사람이 읽을 수 없고, 다른 시스템에서 복원하기 위해서는 역직렬화가 필요합니다.

역직렬화 (Deserialization)
역직렬화는 직렬화된 데이터(바이트 스트림: 바이트 단위로 이루어진 데이터 흐름)를 원래의 파이썬 객체로 복원하는 과정입니다. 즉, 저장되거나 전송된 바이트 스트림을 읽어서 파이썬에서 사용할 수 있는 객체 형태로 변환하는 것입니다.

역직렬화의 예시
직렬화된 데이터가 파일에 저장되어 있다면, 그 파일을 읽어서 다시 원래의 딕셔너리 {'name': 'Alice', 'age': 25}로 복원하는 과정이 역직렬화입니다.

직렬화와 역직렬화의 필요성
데이터 저장: 프로그램에서 생성한 객체를 나중에 사용하려면 이를 파일에 저장해야 합니다. 직렬화를 사용하면 객체를 바이트 형식으로 저장할 수 있습니다.
네트워크 전송: 서로 다른 시스템 간에 데이터를 주고받을 때 객체를 전송하기 위해 직렬화합니다. 예를 들어, 서버와 클라이언트 간의 데이터 전송에서 객체를 직렬화하여 전송하고, 수신한 쪽에서는 이를 역직렬화하여 원래의 객체로 복원합니다.

바이트 스트림: hello의 문자열이 있다면, 각각 h는 아스키코드로 뭐 ~ e는 뭐~ 이렇게 나눠서 바이트 스트림으로 나타내는 것이다. 

공공데이터 open api
urllib.request는 URL에 대한 요청을 보내고, 응답을 받는 기능을 제공하는 모듈입니다. 주로 웹에서 데이터를 가져오거나 웹 페이지와 상호작용하는 데 사용됩니다.

Request는 웹 서버에 HTTP 요청을 보낼 때 사용됩니다. 요청을 보낼 때 사용할 다양한 옵션을 설정할 수 있습니다.
urlopen은 URL에 GET 또는 POST 요청을 보내고, 서버로부터 응답을 받는 함수입니다. 반환된 객체는 웹 페이지의 콘텐츠나 서버에서 반환한 데이터를 담고 있습니다.
urllib.parse는 URL을 다룰 때 유용한 함수들을 제공하는 모듈입니다. URL을 구성하거나 분석하고, 쿼리 문자열을 인코딩 및 디코딩하는 등의 작업을 할 수 있습니다.

- urlencode:
urlencode는 파라미터들을 URL의 쿼리 문자열 형식으로 변환하는 함수입니다. 주로 딕셔너리 형태로 데이터를 받아서 key=value 형식의 쿼리 문자열로 변환합니다.
quote_plus는 문자열을 URL에서 안전하게 사용할 수 있는 형식으로 변환하는 함수입니다. 공백을 +로, 특수 문자는 URL 인코딩 방식(예: %20)으로 변환합니다.
unquote는 URL 인코딩된 문자열을 원래의 문자열로 복원하는 함수입니다. %20과 같은 URL 인코딩을 다시 공백 문자로 복원합니다.

